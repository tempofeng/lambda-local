import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jp.classmethod.aws.lambda'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = 'UTF-8'
}

dependencies {
    compile project(':lambda-local')

    // guava
    compile rootProject.ext.guava

    // aws lambda
    compile rootProject.ext.awsLambdaJavaCore
    compile rootProject.ext.awsLambdaJavaEvents
    compile rootProject.ext.awsLambdaJavaLog4j

    // jackson
    compile rootProject.ext.jacksonCore
    compile rootProject.ext.jacksonDatabind
    compile rootProject.ext.jacksonAnnotation

    // slf4j
    compile rootProject.ext.slf4jApi
    compile rootProject.ext.slf4jLog4j12

    // servlet api
    compileOnly rootProject.ext.servletApi

    // assertj
    testCompile rootProject.ext.assertjCore

    // junit
    testCompile rootProject.ext.junit

    // mockito
    testCompile rootProject.ext.mockitoCore
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

build.dependsOn buildZip

gretty {
    // supported values:
    // 'jetty7', 'jetty8', 'jetty9', 'tomcat7', 'tomcat8'
    servletContainer = 'jetty9'
    contextPath = ''
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

aws {
    profileName = 'zaoo'
    region = project.hasProperty('awsRegion') ? awsRegion : 'ap-southeast-1'
}

lambda {
    region = project.hasProperty('awsRegion') ? awsRegion : 'ap-southeast-1'
}

task deployHelloRestService(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    handler = "com.zaoo.lambda.example.HelloRestService"
    functionName = "lleHelloRestService"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
    zipFile = shadowJar.archivePath
    memorySize = 512
    timeout = 900
}

task deployHelloRootService(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    handler = "com.zaoo.lambda.example.HelloRootService"
    functionName = "lleHelloRootService"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
    zipFile = shadowJar.archivePath
    memorySize = 512
    timeout = 900
}
